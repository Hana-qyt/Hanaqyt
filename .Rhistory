print(names(vancouver_data))
vancouver_data <- vancouver_data %>%
mutate(DayOfWeek = wday(ymd_hms(Request.Open.Time), label = TRUE, abbr = FALSE))
complaints_by_day <- vancouver_data %>%
group_by(DayOfWeek) %>%
summarise(Count = n())
ggplot(complaints_by_day, aes(x = reorder(DayOfWeek, -Count), y = Count, fill = DayOfWeek)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme_minimal() +
labs(title = "City Service Complaints by Day of the Week",
x = "Day of the Week",
y = "Number of Complaints") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
top_service_requests <- vancouver_data %>%
count(Service.request.type, sort = TRUE) %>%
top_n(7, n) %>%
pull(Service.request.type)
filtered_vancouver_data <- vancouver_data %>%
filter(Service.request.type %in% top_service_requests)
filtered_row_count <- nrow(filtered_vancouver_data)
cat("After filtering, the dataset contains", filtered_row_count, "rows.\n")
ggplot(vancouver_data, aes(x = weekdays(Request.Open.Time), fill = Department)) +
geom_bar() +
theme_minimal() +
labs(title = "City Service Complaints by Day of the Week",
x = "Day of the Week",
y = "Number of Complaints",
fill = "Department") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)
library(ggplot2
ggplot(vancouver_data, aes(x = weekdays(Request.Open.Time), fill = Department)) +
library(ggplot2)
ggplot(vancouver_data, aes(x = weekdays(Request.Open.Time), fill = Department)) +
geom_bar() +
theme_minimal() +
labs(title = "City Service Complaints by Day of the Week",
x = "Day of the Week",
y = "Number of Complaints",
fill = "Department") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)
vancouver_data$Request.Open.Time <- as.POSIXct(vancouver_data$Request.Open.Time)
ggplot(vancouver_data, aes(x = weekdays(Request.Open.Time), fill = Department)) +
geom_bar() +
theme_minimal() +
labs(title = "City Service Complaints by Day of the Week",
x = "Day of the Week",
y = "Number of Complaints",
fill = "Department") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)
ggplot(vancouver_data, aes(x = weekdays(Request.Open.Time), fill = Department)) +
geom_bar() +
theme_minimal() +
labs(title = "City Service Complaints by Day of the Week",
x = "Day of the Week",
y = "Number of Complaints",
fill = "Department") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 计算每个星期几的投诉数量（按部门分类）
complaints_by_weekday <- vancouver_data %>%
mutate(Weekday = weekdays(Request.Open.Time)) %>%
group_by(Weekday, Department) %>%
summarise(Total_Complaints = n(), .groups = "drop")
# 显示表格
library(ace_tools)  # 确保 ace_tools 用于展示表格
# 确保 Request.Open.Time 是 POSIXct 格式
vancouver_data <- vancouver_data %>%
mutate(Request.Open.Time = as.POSIXct(Request.Open.Time, format="%Y-%m-%d %H:%M:%S"))
# 计算每个星期几的投诉数量（按部门分类）
complaints_by_weekday <- vancouver_data %>%
mutate(Weekday = weekdays(Request.Open.Time)) %>%
group_by(Weekday, Department) %>%
summarise(Total_Complaints = n(), .groups = "drop")
# 显示数据表格
print(complaints_by_weekday)   # 方式 1
View(complaints_by_weekday)    # 方式 2（适用于 RStudio）
# 按星期几绘制投诉数量柱状图
ggplot(complaints_by_weekday, aes(x = factor(Weekday,
levels = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday")),
y = Total_Complaints, fill = Department)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(title = "City Service Complaints by Day of the Week",
x = "Day of the Week",
y = "Number of Complaints",
fill = "Department") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 确保 Request.Open.Time 是 POSIXct 格式
vancouver_data <- vancouver_data %>%
mutate(Request.Open.Time = as.POSIXct(Request.Open.Time, format="%Y-%m-%d %H:%M:%S"))
# 计算每个星期几的投诉数量（按部门分类）
complaints_by_weekday <- vancouver_data %>%
mutate(Weekday = weekdays(Request.Open.Time)) %>%
group_by(Weekday, Department) %>%
summarise(Total_Complaints = n(), .groups = "drop")
print(complaints_by_weekday)   # 方式 1
View(complaints_by_weekday)    # 方式 2（适用于 RStudio）
ggplot(complaints_by_weekday, aes(x = factor(Weekday,
levels = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday")),
y = Total_Complaints, fill = Department)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(title = "City Service Complaints by Day of the Week",
x = "Day of the Week",
y = "Number of Complaints",
fill = "Department") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
filtered_vancouver_data <- vancouver_data %>%
mutate(Weekday = weekdays(ymd_hms(Service.request.open.timestamp)))
filtered_vancouver_data <- vancouver_data %>%
mutate(Weekday = weekdays(ymd_hms(Request.open.time)))
filtered_vancouver_data <- vancouver_data %>%
mutate(Weekday = weekdays(ymd_hms(Request.Open.Time)))
filtered_vancouver_data <- filtered_vancouver_data %>%
mutate(Weekday = weekdays(ymd_hms(Request.Open.Time)))
ggplot(filtered_vancouver_data, aes(x = factor(Weekday,
levels = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday")),
fill = Department)) +
geom_bar() +
theme_minimal() +
labs(title = "City Service Complaints by Day of the Week (Top 7 Request Types)",
x = "Day of the Week",
y = "Number of Complaints",
fill = "Department") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(dplyr)
vancouver_data <- read.csv("~/Desktop/vancouver_311_requests.csv", sep = ";", stringsAsFactors = FALSE)
head(vancouver_data)
str(vancouver_data)
num_rows <- nrow(vancouver_data)
num_cols <- ncol(vancouver_data)
cat("The dataset contains", num_rows, "rows and", num_cols, "columns.\n")
num_unique_local_areas <- length(unique(vancouver_data$Local.area))
cat("The dataset contains", num_unique_local_areas, "unique Local.area values.\n")
kerrisdale_data <- vancouver_data %>% filter(Local.area == "Kerrisdale")
num_kerrisdale_records <- nrow(kerrisdale_data)
cat("The filtered dataset contains", num_kerrisdale_records, "records.\n")
date_columns <- names(vancouver_data)[sapply(vancouver_data, function(x) any(grepl("\\d{4}-\\d{2}-\\d{2}", x)))]
cat("columns contain date-related information:", paste(date_columns, collapse=", "), "\n")
str(vancouver_data[date_columns])
vancouver_data <- vancouver_data %>%
mutate(
Service.request.open.timestamp = ymd_hms(Service.request.open.timestamp),
Service.request.close.date = ymd(Service.request.close.date),
Last.modified.timestamp = ymd_hms(Last.modified.timestamp)
)
str(vancouver_data[date_columns])
head(vancouver_data %>% select(Service.request.open.timestamp, Service.request.close.date, Last.modified.timestamp))
vancouver_data <- vancouver_data %>%
mutate(duration = as.numeric(difftime(Service.request.close.date, Service.request.open.timestamp, units = "days")))
head(vancouver_data %>% select(Service.request.open.timestamp, Service.request.close.date, duration))
total_na_count <- sum(is.na(vancouver_data))
cat("The dataset contains", total_na_count, "NA values.\n")
na_counts <- colSums(is.na(vancouver_data))
na_counts_df <- data.frame(Column = names(na_counts), Missing_Values = na_counts)
print(na_counts_df)
ggplot(data = na_counts_df, aes(x = reorder(Column, -Missing_Values), y = Missing_Values)) +
geom_bar(stat = "identity", fill = "pink", alpha = 0.7) +
theme_minimal() +
labs(title = "Missing Values by Column",
x = "Columns",
y = "Number of Missing Values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
library(dplyr)
vancouver_data <- read.csv("~/Desktop/vancouver_311_requests.csv", sep = ";", stringsAsFactors = FALSE)
head(vancouver_data)
str(vancouver_data)
num_rows <- nrow(vancouver_data)
num_cols <- ncol(vancouver_data)
cat("The dataset contains", num_rows, "rows and", num_cols, "columns.\n")
num_unique_local_areas <- length(unique(vancouver_data$Local.area))
cat("The dataset contains", num_unique_local_areas, "unique Local.area values.\n")
kerrisdale_data <- vancouver_data %>% filter(Local.area == "Kerrisdale")
num_kerrisdale_records <- nrow(kerrisdale_data)
cat("The filtered dataset contains", num_kerrisdale_records, "records.\n")
date_columns <- names(vancouver_data)[sapply(vancouver_data, function(x) any(grepl("\\d{4}-\\d{2}-\\d{2}", x)))]
cat("columns contain date-related information:", paste(date_columns, collapse=", "), "\n")
str(vancouver_data[date_columns])
vancouver_data <- vancouver_data %>%
mutate(
Service.request.open.timestamp = ymd_hms(Service.request.open.timestamp),
Service.request.close.date = ymd(Service.request.close.date),
Last.modified.timestamp = ymd_hms(Last.modified.timestamp)
)
str(vancouver_data[date_columns])
head(vancouver_data %>% select(Service.request.open.timestamp, Service.request.close.date, Last.modified.timestamp))
vancouver_data <- vancouver_data %>%
mutate(duration = as.numeric(difftime(Service.request.close.date, Service.request.open.timestamp, units = "days")))
head(vancouver_data %>% select(Service.request.open.timestamp, Service.request.close.date, duration))
total_na_count <- sum(is.na(vancouver_data))
cat("The dataset contains", total_na_count, "NA values.\n")
na_counts <- colSums(is.na(vancouver_data))
na_counts_df <- data.frame(Column = names(na_counts), Missing_Values = na_counts)
print(na_counts_df)
ggplot(data = na_counts_df, aes(x = reorder(Column, -Missing_Values), y = Missing_Values)) +
geom_bar(stat = "identity", fill = "pink", alpha = 0.7) +
theme_minimal() +
labs(title = "Missing Values by Column",
x = "Columns",
y = "Number of Missing Values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
birthday_requests <- vancouver_data %>%
filter(month(Service.request.open.timestamp) == 10 & day(Service.request.open.timestamp) == 16)
birthday <- "October 16"
num_birthday_requests <- nrow(birthday_requests)
cat("On", birthday, "there were", num_birthday_requests, "city service requests.\n")
most_common_channel <- birthday_requests %>%
group_by(Channel) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1)
cat("The most common reporting channel on", birthday, "was", most_common_channel$Channel, "with", most_common_channel$count, "requests.\n")
most_common_request_type <- birthday_requests %>%
group_by(Service.request.type) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1)
cat("The most common service request type on", birthday, "was", most_common_request_type$Service.request.type, "with", most_common_request_type$count, "requests.\n")
yearly_requests <- vancouver_data %>%
mutate(Year = year(Service.request.open.timestamp)) %>%
group_by(Year) %>%
summarise(Total_Requests = n())
print(yearly_requests)
ggplot(yearly_requests, aes(x = Year, y = Total_Requests)) +
geom_line(color = "red", linewidth = 1) +
geom_point(size = 3, color = "orange") +
theme_minimal() +
labs(title = "Total City Service Requests Opened Per Year",
x = "Year",
y = "Number of Requests")
channel_col <- "Channel"
duration_col <- "duration"
channel_duration_avg <- vancouver_data %>%
group_by(.data[[channel_col]]) %>%
summarise(Average_Duration = mean(.data[[duration_col]], na.rm = TRUE))
print(channel_duration_avg)
ggplot(channel_duration_avg, aes(x = reorder(.data[[channel_col]], Average_Duration), y = Average_Duration)) +
geom_bar(stat = "identity", fill = "skyblue", alpha = 0.8) +
theme_minimal() +
labs(title = "Average Duration by Channel",
x = "Channel",
y = "Average Duration (Days)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
vancouver_data <- vancouver_data %>%
mutate(Month = month(ymd_hms(Service.request.open.timestamp), label = TRUE))
open_requests_by_month <- vancouver_data %>%
filter(Status == "Open") %>%
group_by(Month) %>%
summarise(Total_Open_Requests = n())
print(open_requests_by_month)
ggplot(open_requests_by_month, aes(x = Month, y = Total_Open_Requests)) +
geom_bar(stat = "identity", fill = "yellow", alpha = 0.8) +
theme_minimal() +
labs(title = "Total Open Requests by Month",
x = "Month",
y = "Number of Open Requests") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cat("Before renaming:\n")
print(names(vancouver_data))
# Rename the column
vancouver_data <- vancouver_data %>%
rename(Request.Open.DateTime = Service.request.open.timestamp)
# Display column names after renaming
cat("\nAfter renaming:\n")
print(names(vancouver_data))
cat("Before removing 'Address':\n")
print(names(vancouver_data))
vancouver_data <- vancouver_data %>%
select(-Address)
cat("\nAfter removing 'Address':\n")
print(names(vancouver_data))
vancouver_data <- vancouver_data %>%
mutate(DayOfWeek = wday(ymd_hms(Request.Open.Time), label = TRUE, abbr = FALSE))
library(dplyr)
library(ggplot2)
vancouver_data <- vancouver_data %>%
mutate(DayOfWeek = wday(ymd_hms(Request.Open.DateTime), label = TRUE, abbr = FALSE))
complaints_by_day <- vancouver_data %>%
group_by(DayOfWeek) %>%
summarise(Count = n())
ggplot(complaints_by_day, aes(x = reorder(DayOfWeek, -Count), y = Count, fill = DayOfWeek)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme_minimal() +
labs(title = "City Service Complaints by Day of the Week",
x = "Day of the Week",
y = "Number of Complaints") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
top_service_requests <- vancouver_data %>%
count(Service.request.type, sort = TRUE) %>%
top_n(7, n) %>%
pull(Service.request.type)
filtered_vancouver_data <- vancouver_data %>%
filter(Service.request.type %in% top_service_requests)
filtered_row_count <- nrow(filtered_vancouver_data)
cat("After filtering, the dataset contains", filtered_row_count, "rows.\n")
filtered_vancouver_data <- filtered_vancouver_data %>%
mutate(Weekday = weekdays(ymd_hms(Request.Open.Time)))
library(dplyr)
library(ggplot2)
filtered_vancouver_data <- filtered_vancouver_data %>%
mutate(Weekday = weekdays(ymd_hms(Request.Open.DateTime)))
ggplot(filtered_vancouver_data, aes(x = factor(Weekday,
levels = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday")),
fill = Department)) +
geom_bar() +
theme_minimal() +
labs(title = "City Service Complaints by Day of the Week (Top 7 Request Types)",
x = "Day of the Week",
y = "Number of Complaints",
fill = "Department") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
filtered_vancouver_data <- filtered_vancouver_data %>%
mutate(Weekday = weekdays(ymd_hms(Request.Open.DateTime)))
ggplot(filtered_vancouver_data, aes(x = factor(Weekday,
levels = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday")),
fill = Department)) +
geom_bar() +
theme_minimal() +
labs(title = "City Service Complaints by Day of the Week (Top 7 Request Types)",
x = "Day of the Week",
y = "Number of Complaints",
fill = "Department") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
filtered_vancouver_data <- filtered_vancouver_data %>%
mutate(Month = month(ymd_hms(Request.Open.DateTime), label = TRUE, abbr = FALSE))
monthly_complaints <- filtered_vancouver_data %>%
group_by(Month, Service.request.type) %>%
summarise(Count = n(), .groups = "drop")
ggplot(monthly_complaints, aes(x = Month, y = Count, fill = Service.request.type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(title = "Total 311 Complaints by Month (Top 7 Request Types)",
x = "Month",
y = "Number of Complaints",
fill = "Request Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
# 继续处理数据，检查 `duration` 是否存在 NA
filtered_vancouver_data <- filtered_vancouver_data %>%
filter(!is.na(duration))  # 移除 NA 值
# 确定合适的直方图 bins 数量（可调整）
num_bins <- 30
# 处理异常值（假设 duration 超过 100 天为异常）
max_duration <- 100
filtered_vancouver_data <- filtered_vancouver_data %>%
filter(duration <= max_duration)
# 绘制直方图
ggplot(filtered_vancouver_data, aes(x = duration)) +
geom_histogram(bins = num_bins, fill = "skyblue", color = "black", alpha = 0.8) +
theme_minimal() +
labs(title = "Distribution of City Service Request Durations",
x = "Duration (Days)",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
filtered_vancouver_data <- filtered_vancouver_data %>%
filter(!is.na(duration))
# 设定 bins 数量（可调整）
num_bins <- 30
# 处理异常值（假设 `duration > 100` 天为异常）
max_duration <- 100
filtered_vancouver_data <- filtered_vancouver_data %>%
filter(duration <= max_duration)
# 绘制按 `Service.request.type` 分面的直方图
ggplot(filtered_vancouver_data, aes(x = duration)) +
geom_histogram(bins = num_bins, fill = "lightcoral", color = "black", alpha = 0.8) +
theme_minimal() +
labs(title = "Distribution of Service Request Durations by Type",
x = "Duration (Days)",
y = "Frequency") +
facet_wrap(~Service.request.type, scales = "free_y") +  # 分面显示每种请求类型
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
filtered_vancouver_data <- filtered_vancouver_data %>%
filter(!is.na(duration))
num_bins <- 30
max_duration <- 100
filtered_vancouver_data <- filtered_vancouver_data %>%
filter(duration <= max_duration)
ggplot(filtered_vancouver_data, aes(x = duration)) +
geom_histogram(bins = num_bins, fill = "skyblue", color = "black", alpha = 0.8) +
theme_minimal() +
labs(title = "Distribution of Service Request Durations by Type",
x = "Duration (Days)",
y = "Frequency") +
facet_wrap(~Service.request.type, scales = "free_y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
filtered_vancouver_data <- filtered_vancouver_data %>%
filter(!is.na(Channel), !is.na(Service.request.type))
# 绘制按 `Channel` 分类的比例填充柱状图
ggplot(filtered_vancouver_data, aes(x = Channel, fill = Service.request.type)) +
geom_bar(position = "fill") +  # 使所有柱子高度相等
theme_minimal() +
labs(title = "Proportional Distribution of Service Requests by Channel",
x = "Channel",
y = "Proportion",
fill = "Request Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
kerrisdale_data <- filtered_vancouver_data %>%
filter(Local.area == "Kerrisdale", !is.na(Latitude), !is.na(Longitude))
leaflet(kerrisdale_data) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
color = "blue",
radius = 4,
opacity = 0.8,
popup = ~paste("Request Type:", Service.request.type, "<br>",
"Channel:", Channel, "<br>",
"Status:", Status)
) %>%
addLegend(
position = "bottomright",
colors = "blue",
labels = "Service Requests in Kerrisdale",
title = "Legend"
library(dplyr)
library(ggplot2)
kerrisdale_data <- filtered_vancouver_data %>%
filter(Local.area == "Kerrisdale", !is.na(Latitude), !is.na(Longitude))
leaflet(kerrisdale_data) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
color = "blue",
radius = 4,
opacity = 0.8,
popup = ~paste("Request Type:", Service.request.type, "<br>",
"Channel:", Channel, "<br>",
"Status:", Status)
) %>%
addLegend(
position = "bottomright",
colors = "blue",
labels = "Service Requests in Kerrisdale",
title = "Legend"
)
library(dplyr)
library(ggplot2)
kerrisdale_data <- filtered_vancouver_data %>%
filter(Local.area == "Kerrisdale", !is.na(Latitude), !is.na(Longitude))
pal <- colorFactor(palette = "blue", domain = kerrisdale_data$Service.request.type)
library(dplyr)
library(ggplot2)
library(leaflet)
library(leaflet)
install.packages("leaflet")
library(leaflet)
kerrisdale_data <- filtered_vancouver_data %>%
filter(Local.area == "Kerrisdale", !is.na(Latitude), !is.na(Longitude))
pal <- colorFactor(palette = "blue", domain = kerrisdale_data$Service.request.type)
leaflet(kerrisdale_data) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
color = ~pal(Service.request.type),
radius = 4,
opacity = 0.8,
popup = ~paste("Request Type:", Service.request.type, "<br>",
"Channel:", Channel, "<br>",
"Status:", Status)
) %>%
addLegend(
position = "bottomright",
pal = pal,
values = kerrisdale_data$Service.request.type,
title = "Service Request Type"
)
kerrisdale_data <- filtered_vancouver_data %>%
filter(Local.area == "Kerrisdale", !is.na(Latitude), !is.na(Longitude))
pal <- colorFactor(palette = "Set1", domain = kerrisdale_data$Service.request.type)
leaflet(kerrisdale_data) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
color = ~pal(Service.request.type),
radius = 4,
opacity = 0.8,
popup = ~paste("Request Type:", Service.request.type, "<br>",
"Channel:", Channel, "<br>",
"Status:", Status)
) %>%
addLegend(
position = "bottomright",
pal = pal,
values = kerrisdale_data$Service.request.type,
title = "Service Request Type"
)
chooseCRANmirror()
